generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum AccountRoles {
  ADMIN
  CLIENT
}

enum CompanyType {
  DIGITAL_MARKETING_AGENCY
  SERVICE_COMPANY
  BUSINESS
  STARTUP
}

enum CompanyCustomers {
  C1_10
  C11_20
  C21_50
  C51_100
  C100P
}

enum CompanyEmployees {
  JUST_ME
  C1_10
  C11_20
  C21_50
  C51_100
  C100P
}

enum PaymentStatus {
  PENDING
  PAID
}

enum PaymentPlan {
  STANDARD
  PLUS
  PREMIUM
}

model Company {
  companyid        String           @id
  companyname      String
  companycnpj      String           @unique
  companytype      CompanyType
  companycustomers CompanyCustomers
  companyemployees CompanyEmployees
  Accounts         Accounts[]
}

model Accounts {
  acountid         String       @id
  createAt         DateTime     @default(now())
  username         String       @unique
  email            String       @unique
  password         String
  role             AccountRoles @default(CLIENT)
  companyCompanyid String
  company          Company      @relation(fields: [companyCompanyid], references: [companyid])
  Funnel           Funnel[]

  @@index([email])
}

model IntentAccount {
  intentid      String        @id @default(uuid())
  createAt      DateTime      @default(now())
  email         String        @unique
  paymentid     String        @unique
  plan          PaymentPlan
  paymentstatus PaymentStatus @default(PENDING)

  @@index([email])
}

model Funnel {
  funnelid   String     @id @default(uuid())
  title     String
  accountId String
  account   Accounts   @relation(fields: [accountId], references: [acountid])
  pipelines Pipeline[]
  orderPipes String     @default("[]")

  @@index([accountId])
  @@map("Funnels")
}

model Pipeline {
  pipeid    String     @id @default(uuid())
  title     String
  isDefaut  Boolean    @default(false)
  headColor String
  funnelId  String
  items     ItemPipe[]
  funnel    Funnel     @relation(fields: [funnelId], references: [funnelid], onDelete: Cascade)

  @@index([funnelId])
  @@map("Pipelines")
}

model ItemPipe {
  itemid         String   @id @default(uuid())
  title          String
  contactId      String
  collaboratorId String
  amount         Float
  tags           String   @default("[]")
  accountId      String
  pipelineId     String
  pipeline       Pipeline @relation(fields: [pipelineId], references: [pipeid], onDelete: Cascade)

  @@index([pipelineId])
  @@map("Opportunities")
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  FILE
}

enum ScheduledStatus {
  PENDING
  SENT
  CANCELED
}

model Contact {
  contactId      String @id
  username       String
  collaboratorId String
  phone          String
  email          String
  companyId      String
}

// Conversation between two account ids; store pair in sorted order a<=b
model Conversation {
  id             String    @id @default(uuid())
  participantAId String
  participantBId String
  createdAt      DateTime  @default(now())
  messages       Message[]

  @@unique([participantAId, participantBId])
  @@index([participantAId])
  @@index([participantBId])
}

model Message {
  id             String       @id @default(uuid())
  conversationId String
  senderId       String
  receiverId     String
  contentType    MessageType
  contentData    String
  timestamp      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([senderId])
  @@index([receiverId])
}

model QuickMessage {
  id          String      @id @default(uuid())
  accountId   String
  title       String?
  contentType MessageType
  contentData String
  createdAt   DateTime    @default(now())

  @@index([accountId])
}

model ScheduledMessage {
  id          String          @id @default(uuid())
  senderId    String
  receiverId  String
  contentType MessageType
  contentData String
  scheduleAt  DateTime
  status      ScheduledStatus @default(PENDING)
  createdAt   DateTime        @default(now())

  @@index([senderId])
  @@index([receiverId])
  @@index([scheduleAt])
}
